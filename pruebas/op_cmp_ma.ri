// Pruebo la operación 'cmp'
módulo prueba_op_cmp_ma;

declara nada @#poncar(n32 %carácter);

@correcto_txt = ".";
@comparaciones_literales_error = "\nERROR - op:cmp ma entre literales\n";

define e32 @inicio(r32 %pi)
{
    %res0 = llama n1 @prueba_cmp_ma_literales_naturales();
    %er0 = cmp ig n1 %res0, 0;
    slt n1 %er0, :error;

    %res1 = llama n1 @prueba_cmp_ma_literales_enteros();
    %er1 = cmp ig n1 %res1, 0;
    slt n1 %er1, :error;

    %res2 = llama n1 @prueba_cmp_ma_literales_reales();
    %er2 = cmp ig n1 %res2, 0;
    slt n1 %er2, :error;

    ret e32 0;

error:
    ret e32 -1;
}


define n1 @prueba_cmp_ma_literales_naturales()
{

////////////////////////////// NATURALES //////////////////////////////

////////////////////////////// MAYOR QUE //////////////////////////////


// Operando_1 > Operando_2

naturales_prueba1:
    %1 = cmp ma n32 2, 1;
    slt n1 %1, :naturales_prueba1_correcto;
    llama nada @escribe(@comparaciones_literales_error);
    ret n1 0;
naturales_prueba1_correcto:
    llama nada @escribe(@correcto_txt);

naturales_prueba2:
    %2 = cmp ma n32 43, 42;
    slt n1 %2, :naturales_prueba2_correcto;
    llama nada @escribe(@comparaciones_literales_error);
    ret n1 0;
naturales_prueba2_correcto:
    llama nada @escribe(@correcto_txt);

naturales_prueba3:
    %3 = cmp ma n32 289, 288;
    slt n1 %3, :naturales_prueba3_correcto;
    llama nada @escribe(@comparaciones_literales_error);
    ret n1 0;
naturales_prueba3_correcto:
    llama nada @escribe(@correcto_txt);

naturales_prueba4:
    %4 = cmp ma n32 1000, 0;
    slt n1 %4, :naturales_prueba4_correcto;
    llama nada @escribe(@comparaciones_literales_error);
    ret n1 0;
naturales_prueba4_correcto:
    llama nada @escribe(@correcto_txt);


// Operando_1 <= Operando_2

naturales_prueba5:
    %5 = cmp ma n32 0, 1;
    slt n1 %5, :naturales_prueba5_error;
    llama nada @escribe(@correcto_txt);
    slt :naturales_prueba6;
naturales_prueba5_error:
    llama nada @escribe(@comparaciones_literales_error);
    ret n1 0;

naturales_prueba6:
    %6 = cmp ma n32 1, 42;
    slt n1 %6, :naturales_prueba6_error;
    llama nada @escribe(@correcto_txt);
    slt :naturales_prueba7;
naturales_prueba6_error:
    llama nada @escribe(@comparaciones_literales_error);
    ret n1 0;

naturales_prueba7:
    %7 = cmp ma n32 0, 288;
    slt n1 %7, :naturales_prueba7_error;
    llama nada @escribe(@correcto_txt);
    slt :naturales_prueba8;
naturales_prueba7_error:
    llama nada @escribe(@comparaciones_literales_error);
    ret n1 0;

naturales_prueba8:
    %8 = cmp ma n32 1, 1024;
    slt n1 %8, :naturales_prueba8_error;
    llama nada @escribe(@correcto_txt);
    slt :fin;
naturales_prueba8_error:
    llama nada @escribe(@comparaciones_literales_error);
    ret n1 0;

fin:
    ret n1 1;
}


define n1 @prueba_cmp_ma_literales_enteros()
{

//////////////////////////////  ENTEROS  //////////////////////////////

////////////////////////////// MAYOR QUE //////////////////////////////

// Operando_1 > Operando_2

enteros_prueba1:
    %1 = cmp ma e32 2, -1;
    slt n1 %1, :enteros_prueba1_correcto;
    llama nada @escribe(@comparaciones_literales_error);
    ret n1 0;
enteros_prueba1_correcto:
    llama nada @escribe(@correcto_txt);
    slt :enteros_prueba2;

enteros_prueba2:
    %2 = cmp ma e32 -42, -43;
    slt n1 %2, :enteros_prueba2_correcto;
    llama nada @escribe(@comparaciones_literales_error);
    ret n1 0;
enteros_prueba2_correcto:
    llama nada @escribe(@correcto_txt);
    slt :enteros_prueba3;

enteros_prueba3:
    %3 = cmp ma e32 288, -288;
    slt n1 %3, :enteros_prueba3_correcto;
    llama nada @escribe(@comparaciones_literales_error);
    ret n1 0;
enteros_prueba3_correcto:
    llama nada @escribe(@correcto_txt);

enteros_prueba4:
    %4 = cmp ma e32 1000, -10;
    slt n1 %4, :enteros_prueba4_correcto;
    llama nada @escribe(@comparaciones_literales_error);
    ret n1 0;
enteros_prueba4_correcto:
    llama nada @escribe(@correcto_txt);


// Operando_1 <= Operando_2

enteros_prueba5:
    %5 = cmp ma e32 0, 1;
    slt n1 %5, :enteros_prueba5_error;
    llama nada @escribe(@correcto_txt);
    slt :enteros_prueba6;
enteros_prueba5_error:
    llama nada @escribe(@comparaciones_literales_error);
    ret n1 0;

enteros_prueba6:
    %6 = cmp ma e32 -1, 42;
    slt n1 %6, :enteros_prueba6_error;
    llama nada @escribe(@correcto_txt);
    slt :enteros_prueba7;
enteros_prueba6_error:
    llama nada @escribe(@comparaciones_literales_error);
    ret n1 0;

enteros_prueba7:
    %7 = cmp ma e32 0, 288;
    slt n1 %7, :enteros_prueba7_error;
    llama nada @escribe(@correcto_txt);
    slt :enteros_prueba8;
enteros_prueba7_error:
    llama nada @escribe(@comparaciones_literales_error);
    ret n1 0;

enteros_prueba8:
    %8 = cmp ma e32 -1, 1024;
    slt n1 %8, :enteros_prueba8_error;
    llama nada @escribe(@correcto_txt);
    slt :fin;
enteros_prueba8_error:
    llama nada @escribe(@comparaciones_literales_error);
    ret n1 0;

fin:
    ret n1 1;
}


define n1 @prueba_cmp_ma_literales_reales()
{

//////////////////////////////   REALES  //////////////////////////////

////////////////////////////// MAYOR QUE //////////////////////////////


// Operando_1 > Operando_2

reales_prueba1:
    %1 = cmp ma r32 2.0, -1.0;
    slt n1 %1, :reales_prueba1_correcto;
    llama nada @escribe(@comparaciones_literales_error);
    ret n1 0;
reales_prueba1_correcto:
    llama nada @escribe(@correcto_txt);
    slt :reales_prueba2;

reales_prueba2:
    %2 = cmp ma r32 -42.0, -43.0;
    slt n1 %2, :reales_prueba2_correcto;
    llama nada @escribe(@comparaciones_literales_error);
    ret n1 0;
reales_prueba2_correcto:
    llama nada @escribe(@correcto_txt);
    slt :reales_prueba3;

reales_prueba3:
    %3 = cmp ma r32 288.143456, -288.3427;
    slt n1 %3, :reales_prueba3_correcto;
    llama nada @escribe(@comparaciones_literales_error);
    ret n1 0;
reales_prueba3_correcto:
    llama nada @escribe(@correcto_txt);

reales_prueba4:
    %4 = cmp ma r32 10.100, -10.3497;
    slt n1 %4, :reales_prueba4_correcto;
    llama nada @escribe(@comparaciones_literales_error);
    ret n1 0;
reales_prueba4_correcto:
    llama nada @escribe(@correcto_txt);


// Operando_1 <= Operando_2

reales_prueba5:
    %5 = cmp ma r32 0, 1.3;
    slt n1 %5, :reales_prueba5_error;
    llama nada @escribe(@correcto_txt);
    slt :reales_prueba6;
reales_prueba5_error:
    llama nada @escribe(@comparaciones_literales_error);
    ret n1 0;

reales_prueba6:
    %6 = cmp ma r32 -1.12, 42.288;
    slt n1 %6, :reales_prueba6_error;
    llama nada @escribe(@correcto_txt);
    slt :reales_prueba7;
reales_prueba6_error:
    llama nada @escribe(@comparaciones_literales_error);
    ret n1 0;

reales_prueba7:
    %7 = cmp ma r32 0.132, 288.543;
    slt n1 %7, :reales_prueba7_error;
    llama nada @escribe(@correcto_txt);
    slt :reales_prueba8;
reales_prueba7_error:
    llama nada @escribe(@comparaciones_literales_error);
    ret n1 0;

reales_prueba8:
    %8 = cmp ma r32 -1.09, -1.09;
    slt n1 %8, :reales_prueba8_error;
    llama nada @escribe(@correcto_txt);
    slt :fin;
reales_prueba8_error:
    llama nada @escribe(@comparaciones_literales_error);
    ret n1 0;

fin:
    ret n1 1;
}


define nada @escribe([0 x n32] %txt)
{
    // preparo el contador %i, y lo pongo a 0
    %ptr_i = rsrva n32;
    guarda n32 0, n32* %ptr_i;

bucle:
    // obtengo un carácter de la lista %txt, el de la posición designada por %ptr_i
    %0 = lee n32, n32* %ptr_i;
    %1 = leeval [6 x n32] %txt, %0;

    // compruebo si el carácter es '\0'
    %2 = cmp ig n32 %1, '\0';

    // si la comprobación es cierta, salto a la etiqueta :fin
    slt n1 %2, :fin;

    // si la comprobación es falsa, escribo el carácter, aumento el contador y reinicio el bucle
    llama nada @#poncar(%1);
    %3 = sum n32 %0, 1;
    guarda n32 %3, n32* %ptr_i;
    
    slt :bucle;

fin:
    ret;
}