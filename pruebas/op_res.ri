// Pruebo la operación 'res'
módulo prueba_op_res;

declara nada @#poncar(n32 %carácter);

@correcto_txt = ".";

define e32 @inicio(r32 %pi)
{
// empezamos con los enteros, pues los naturales no tienen números negativos
restas_literales_prueba5:
    %0 = llama n32 @resta_literales_enteros(0, -1, 1);
    %1 = cmp ig n32 %0, 1;
    slt n1 %1, :restas_literales_prueba6;
    ret e32 -1;

restas_literales_prueba6:
    %2 = llama n32 @resta_literales_enteros(288, 88, 200);
    %3 = cmp ig n32 %2, 1;
    slt n1 %3, :restas_literales_prueba7;
    ret e32 -1;

restas_literales_prueba7:
    %4 = llama n32 @resta_literales_enteros(-42, 8, -50);
    %5 = cmp ig n32 %4, 1;
    slt n1 %5, :restas_literales_prueba8;
    ret e32 -1;

restas_literales_prueba8:
    %6 = llama n32 @resta_literales_enteros(100, -200, 300);
    %7 = cmp ig n32 %6, 1;
    slt n1 %7, :restas_literales_prueba9;
    ret e32 -1;

restas_literales_prueba9:
    %8 = llama n32 @resta_literales_reales(-42, 0.8, -42.8);
    %9 = cmp ig n32 %8, 1;
    slt n1 %9, :restas_literales_prueba10;
    ret e32 -1;

restas_literales_prueba10:
    %10 = llama n32 @resta_literales_reales(1.1e2, -3.14, 113.14);
    %11 = cmp ig n32 %10, 1;
    slt n1 %11, :restas_literales_prueba11;
    ret e32 -1;

restas_literales_prueba11:
    %12 = llama n32 @resta_literales_reales(1.0e-2, 1.01, -1);
    %13 = cmp ig n32 %12, 1;
    slt n1 %13, :restas_literales_prueba12;
    ret e32 -1;

restas_literales_prueba12:
    %14 = llama n32 @resta_literales_reales(3.14e3, 0.1, 3139.9);
    %15 = cmp ig n32 %14, 1;
    slt n1 %15, :restas_literales_fin;
    ret e32 -1;

restas_literales_fin:
    ret e32 0;
}



@resta_literales_enteros_error_txt = "\nERROR - op:res con literales enteros\n";

define n32 @resta_literales_enteros(e32 %op1, e32 %op2, e32 %res)
{
resta_literales_enteros_empieza:
    %res_resta_literales_enteros = res e32 %op1, %op2;
    %0 = cmp ig e32 %res_resta_literales_enteros, %res;

    slt n1 %0, :resta_literales_enteros_correcta;

resta_literales_enteros_error:
    llama nada @escribe(@resta_literales_enteros_error_txt);
    ret n32 0;

resta_literales_enteros_correcta:
    llama nada @escribe(@correcto_txt);
    slt :resta_literales_enteros_fin;

resta_literales_enteros_fin:
    ret n32 1;
}



@resta_literales_reales_error_txt = "\nERROR - op:res con literales reales\n";

define n32 @resta_literales_reales(r32 %op1, r32 %op2, r32 %res)
{
resta_literales_reales_empieza:
    %res_resta_literales_reales = res r32 %op1, %op2;
    %0 = cmp ig r32 %res_resta_literales_reales, %res;

    slt n1 %0, :resta_literales_reales_correcta;

resta_literales_reales_error:
    llama nada @escribe(@resta_literales_reales_error_txt);
    ret n32 0;

resta_literales_reales_correcta:
    llama nada @escribe(@correcto_txt);
    slt :resta_literales_reales_fin;

resta_literales_reales_fin:
    ret n32 1;
}


define nada @escribe([0 x n32] %txt)
{
    // preparo el contador %i, y lo pongo a 0
    %ptr_i = rsrva n32;
    guarda n32 0, n32* %ptr_i;

bucle:
    // obtengo un carácter de la lista %txt, el de la posición designada por %ptr_i
    %0 = lee n32, n32* %ptr_i;
    %1 = leeval [6 x n32] %txt, %0;

    // compruebo si el carácter es '\0'
    %2 = cmp ig n32 %1, '\0';

    // si la comprobación es cierta, salto a la etiqueta :fin
    slt n1 %2, :fin;

    // si la comprobación es falsa, escribo el carácter, aumento el contador y reinicio el bucle
    llama nada @#poncar(%1);
    %3 = sum n32 %0, 1;
    guarda n32 %3, n32* %ptr_i;
    
    slt :bucle;

fin:
    ret;
}