//Código de ejemplo
módulo código;

/*
También usado para pruebas.
Por ahora, la dirección de este archivo está grabada directamente en el código.
*/

@txt = privado n32 'h';

declara e32 @sal(e32 %hola, r18 %lol);

@hola = público r64 3.141592;


@lol = externo n32;

@roto2 = privado e32 -288;

@xd = privado e32 42;

@mi.prueba<hola>#adios.xyz#entero#real = privado e32 12;


define e32 @adiós(r64 %real, n1 %booleano)
{
    %0 = conv n1 %booleano a e32;
    %1 = sum e32 288, %0;
    %2 = sum e32 288, %1;
    ret e32 %2;
}


define e32 @inicio(r32 %pi)
{
    %x = conv e32 @mi.prueba<hola>#adios.xyz#entero#real a e6;

    %ptr = rsrva e32;
    lee e32, e32* %ptr;

    %a = cmp ig e32 42, 41;
    slt n1 %a, :lol;

    %w = llama e32 @adiós(%pi, %a);

    llama nada @#poncar('h');
    llama nada @#poncar('o');
    llama nada @#poncar('l');
    llama nada @#poncar('a');
    llama nada @#poncar('\n');

lol:

    %y = conv e6 %x a e32;
    %p = phi e32 [18, :lol];
    %1 = sum e32 %y, @roto2;
    %2 = sum e32 @xd, %1;
    %3 = conv e32 %2 a r64;
    %4 = mul r64 %3, @hola;
    %5 = conv e32 @xd a r64;
    %6 = div r64 %4, %5;

    %7 = conv r64 %6 a e32;
    %8 = conv e32 %7 a n32;

    %9 = sum n32 @txt, %8;

    %10 = conv n32 %9 a e32;

    ret e32 %10;
}
